# Program 2 - Divide
# LOAD ALL SOURCE DATA
SEI 1
LW R0, RIM 	# LSB Dividend
SEI 0		
LW R1, RIM	# MSB Dividend 
SEI 2
LW R2, RIM	# Divisor

# LOAD ALL RESULT DATA
SEI 0
ADD R3, RIM	# LSB Quotient Result
ADD R4, RIM	# MSB Quotient Result
ADD R5, RIM	# Register for compare

# SET COUNTER
SEI 0
ADD R6, RIM

# MAIN PROCESS 1
Loop:
# -- SHIFTING DIVIDEND
SHIFTL_X R0
SHIFTL_O R1
# -- SHIFTING COMPARE
SHIFTL_O R5	# get the overflow value from dividend 

# -- Compare whether Divisor <= Current compared bit
CLT R2, R5
B1 Result2
CEQ R2, R5

Result2:	
# -- SHIFTING QUOTIENT 
SHIFTL_F R3	# get the overflow value from compare result 
SHIFTL_O R4	

B0 SkipSub
SUB R5, R2	# R5 = Current compare value - Divisor

SkipSub: 
# -- ADD COUNTER
SEI 1
ADD R6, RIM
SEI 8
CEQ R6, RIM
B0 Loop

# STORE QUOTIENT
SEI 5
SW R3, RIM
SEI 4
SW R4, RIM

# RESTART COUNTER
SEI 0
ADD R6, RIM

# PREPARE FRACTION
SEI 0
ADD R3, RIM	# Fractional 

# MAIN PROCESS 2
FracLoop:
# -- SHIFTING COMPARE
SHIFTL_X R5
CLT R2, R5 # Compare whether Divisor < Current compared bit
B1 result3
CEQ R2, R5

Result3:
SHIFTL_F R3 # Get the result to the fractional part

B0 SkipSub2
SUB R5, R2	# R5 = Current compare value - Divisor

SkipSub2:
# -- ADD COUNTER
SEI 1
ADD R6, RIM
SEI 7
CEQ R6, RIM
B0 FracLoop

# STORE FRACTIONAL PART RESULT
SEI 6
SW R3, RIM